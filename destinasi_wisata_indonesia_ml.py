# -*- coding: utf-8 -*-
"""destinasi_wisata_indonesia_ml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R3HBkZ0zIaAfvBA0oYdTfkmyWruJPT_X
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Membaca file CSV
file_path = '/content/drive/My Drive/ml-wisata-halal/destinasi-wisata-halal.csv'
try:
    data = pd.read_csv(file_path)
    print("File berhasil dibaca.")
except FileNotFoundError:
    print(f"File tidak ditemukan di lokasi: {file_path}. Pastikan path sudah benar.")
    raise

# Memuat data destinasi
data.head()

# 1. Preprocessing Data
# Menghapus kolom yang tidak relevan
if {'Place_Id', 'Description', 'Coordinate', 'Column1', '_1'}.issubset(data.columns):
    data = data.drop(columns=['Place_Id', 'Description', 'Coordinate', 'Column1', '_1'])
else:
    print("Beberapa kolom yang akan dihapus tidak ditemukan dalam data.")

# Mengisi nilai kosong di kolom Time_Minutes dengan nilai rata-rata
if 'Time_Minutes' in data.columns:
    data['Time_Minutes'] = data['Time_Minutes'].fillna(data['Time_Minutes'].mean())
else:
    print("Kolom 'Time_Minutes' tidak ditemukan dalam data.")

# Konversi data kategorikal menjadi numerik menggunakan encoding
for col in data.select_dtypes(include=['object']).columns:
    data[col] = data[col].astype('category').cat.codes

# 2. Exploratory Data Analysis
if 'Category' in data.columns:
    plt.figure(figsize=(10, 6))
    sns.countplot(x='Category', data=data)
    plt.title('Distribusi Kategori Tempat Wisata')
    plt.show()
else:
    print("Kolom 'Category' tidak ditemukan untuk analisis distribusi.")

if 'Rating' in data.columns:
    plt.figure(figsize=(10, 6))
    sns.histplot(data['Rating'], kde=True, bins=20)
    plt.title('Distribusi Rating')
    plt.show()
else:
    print("Kolom 'Rating' tidak ditemukan untuk analisis distribusi.")

# 3. Machine Learning - Prediksi Kategori Berdasarkan Fitur Lain
if 'Category' in data.columns:
    # Memisahkan fitur dan target
    X = data.drop(columns=['Category'])
    y = data['Category']

    # Membagi data menjadi training dan testing
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Membuat model Random Forest
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    # Evaluasi model
    predictions = model.predict(X_test)

    print("Classification Report:")
    print(classification_report(y_test, predictions))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, predictions))
    print(f"Accuracy: {accuracy_score(y_test, predictions) * 100:.2f}%")
else:
    print("Kolom 'Category' tidak ditemukan. Tidak dapat melanjutkan machine learning.")