# -*- coding: utf-8 -*-
"""destinasi_wisata_indonesia_ml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R3HBkZ0zIaAfvBA0oYdTfkmyWruJPT_X
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Membaca file CSV
file_path = '/content/drive/My Drive/ml-destinasi-wisata/destinasi-wisata-indonesia.csv'
try:
    data = pd.read_csv(file_path)
    print("File berhasil dibaca.")
except FileNotFoundError:
    print(f"File tidak ditemukan di lokasi: {file_path}. Pastikan path sudah benar.")
    raise

# Memuat data destinasi
data.head()

# 1. Preprocessing Data
# Menghapus kolom yang tidak relevan
if {'Place_Id', 'Description', 'Coordinate', 'Column1', '_1'}.issubset(data.columns):
    data = data.drop(columns=['Place_Id', 'Description', 'Coordinate', 'Column1', '_1'])
else:
    print("Beberapa kolom yang akan dihapus tidak ditemukan dalam data.")

# Mengisi nilai kosong di kolom Time_Minutes dengan nilai rata-rata
if 'Time_Minutes' in data.columns:
    data['Time_Minutes'] = data['Time_Minutes'].fillna(data['Time_Minutes'].mean())
else:
    print("Kolom 'Time_Minutes' tidak ditemukan dalam data.")

# Konversi data kategorikal menjadi numerik menggunakan encoding
for col in data.select_dtypes(include=['object']).columns:
    data[col] = data[col].astype('category').cat.codes

# Buat mapping untuk label kategori
category_labels = {
    0: 'Bahari',
    1: 'Budaya',
    2: 'Cagar Alam',
    3: 'Pusat Perbelanjaan',
    4: 'Taman Hiburan',
    5: 'Tempat Ibadah'
}

# Ganti nilai numerik di kolom 'Category' dengan label deskriptif
if 'Category' in data.columns:
    data['Category_Label'] = data['Category'].map(category_labels)

    # Visualisasi distribusi kategori
    plt.figure(figsize=(10, 6))
    sns.countplot(x='Category_Label', data=data, order=['Bahari', 'Budaya', 'Cagar Alam', 'Pusat Perbelanjaan', 'Taman Hiburan', 'Tempat Ibadah'])
    plt.title('Distribusi Kategori Tempat Wisata')
    plt.xticks(rotation=45)  # Rotasi label agar tidak tumpang tindih
    plt.xlabel('Kategori Tempat Wisata')
    plt.ylabel('Jumlah')
    plt.show()
else:
    print("Kolom 'Category' tidak ditemukan dalam dataset.")

# Pastikan dataset memiliki kolom 'Category' dan 'Rating'
if 'Category' in data.columns and 'Rating' in data.columns:
    # Menghitung rata-rata rating per kategori
    average_rating = data.groupby('Category')['Rating'].mean().reset_index()

    # Mengganti nilai kategori numerik dengan label deskriptif
    category_labels = {
        0: 'Bahari',
        1: 'Budaya',
        2: 'Cagar Alam',
        3: 'Pusat Perbelanjaan',
        4: 'Taman Hiburan',
        5: 'Tempat Ibadah'
    }
    average_rating['Category'] = average_rating['Category'].map(category_labels)

    # Membuat visualisasi bar chart
    plt.figure(figsize=(10, 6))
    sns.barplot(
        x='Category',
        y='Rating',
        data=average_rating,
        palette='viridis'
    )
    plt.title('Rata-Rata Rating per Kategori Tempat Wisata', fontsize=14)
    plt.xlabel('Kategori Tempat Wisata', fontsize=12)
    plt.ylabel('Rata-Rata Rating', fontsize=12)
    plt.xticks(rotation=45)  # Rotasi label kategori untuk lebih jelas
    plt.show()
else:
    print("Kolom 'Category' atau 'Rating' tidak ditemukan dalam dataset.")

if 'Rating' in data.columns:
    plt.figure(figsize=(10, 6))
    sns.histplot(data['Rating'], kde=True, bins=20)
    plt.title('Distribusi Rating')
    plt.show()
else:
    print("Kolom 'Rating' tidak ditemukan untuk analisis distribusi.")

# Verifikasi kolom harga tiket
if 'Price' in data.columns:
    # Jika harga dalam bentuk string, konversi ke numerik
    try:
        data['Price'] = pd.to_numeric(data['Price'], errors='coerce')
    except Exception as e:
        print(f"Terjadi kesalahan saat mengonversi kolom 'Price': {e}")

    # Hilangkan data dengan harga tiket kosong atau tidak valid
    valid_price_data = data.dropna(subset=['Price'])

    # Plot distribusi harga tiket
    plt.figure(figsize=(12, 6))
    sns.histplot(valid_price_data['Price'], bins=20, kde=True, color='blue')
    plt.title('Distribusi Harga Tiket Tempat Wisata', fontsize=16)
    plt.xlabel('Harga Tiket (dalam satuan mata uang)', fontsize=12)
    plt.ylabel('Frekuensi', fontsize=12)
    plt.grid(True)
    plt.show()
else:
    print("Kolom 'Price' tidak ditemukan dalam dataset.")

# 3. Machine Learning - Prediksi Kategori Berdasarkan Fitur Lain
if 'Category' in data.columns:
    # Memisahkan fitur dan target
    X = data.drop(columns=['Category', 'Category_Label'])  # Jangan lupa drop kolom kategori deskriptif
    y = data['Category']

    # Pastikan semua kolom dalam X adalah numerik
    for col in X.select_dtypes(include=['object', 'category']).columns:
        X[col] = X[col].astype('category').cat.codes

    # Membagi data menjadi training dan testing
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Membuat model Random Forest
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    # Evaluasi model
    predictions = model.predict(X_test)

    print("Classification Report:")
    print(classification_report(y_test, predictions))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, predictions))
    print(f"Accuracy: {accuracy_score(y_test, predictions) * 100:.2f}%")
else:
    print("Kolom 'Category' tidak ditemukan. Tidak dapat melanjutkan machine learning.")